library(gridExtra)
library(ggthemes)
library(qpcR)
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("uscrime.txt",
header = TRUE)
# Import libraries.
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(qpcR)
getwd()
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("/OMSA/ISYE6501/Homework/Week_6/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(qpcR)
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table(".../OMSA/ISYE6501/Homework/Week_6/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(qpcR)
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_6/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(qpcR)
uscrime_pca <- prcomp(uscrime_raw,
scale = TRUE)
View(uscrime_pca)
summary(uscrime_pca)
View(uscrime_raw)
names(uscrime_pca)
uscrime_pca <- prcomp(uscrime_raw[, 1:15],
scale = TRUE)
summary(uscrime_pca)
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_6/Data/uscrime.txt",
header = TRUE)
uscrime_pca <- prcomp(uscrime_raw[, 1:15],
scale = TRUE)
summary(uscrime_pca)
View(uscrime_pca)
cor(uscrime_pca$x)
uscrime_pca$rotation
screeplot(uscrime_pca,
type = "lines")
# Get first 4 principal components.
pc <- uscrime_pca$x[, 1:4]
uscrime_raw[, -1]
uscrime_pc <- cbind(pc, uscrime_raw[, 16])
View(uscrime_pc)
View(pc)
model_pc <- lm(V5 ~ .,
data = as.data.frame(uscrime_pc))
summary(model_pc)
#' ---
#' title: "Appendix: Week 7 Homework 10.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_7/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(rpart)
View(uscrime_raw)
# Specify minimum leaf size.
minleaf <- nrow(uscrime_raw) * 0.05
# Specify minimum leaf size.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05)
tree1 <- rpart(formula = Crime ~.,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
View(tree1)
printcp(fit)
printcp(tree1)
View(uscrime_raw)
treeA <- rpart(formula = Crime ~.,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_7/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(rpart)
# Specify minimum leaf size.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05)
treeA <- rpart(formula = Crime ~.,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
treeB <- rpart(formula = Crime ~ Ed + Ineq + U2,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
printcp(treeB)
plot(treeB)
text(treeB)
plotcp(treeB)
summary(treeB)
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_7/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(rpart)
# Specify minimum leaf size.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05) * 2
treeA <- rpart(formula = Crime ~.,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
treeB <- rpart(formula = Crime ~ Ed + Ineq + U2,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
plot(treeA)
treeA_plot <- plot(treeA)
treeA_plot <- plot(treeA) + text(treeA)
plot(treeA)
text(treeA)
print(treeA)
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_7/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(rpart)
# Specify minimum leaf size required before branching.
# 10% of data must occupy leaf before split is attempted.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05) * 2
# Specify minimum leaf size required before branching.
# 10% of data must occupy leaf before split is attempted.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05) * 2
# Create regression tree model.
treeA <- rpart(formula = Crime ~ .,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
treeA
rpart.plot(treeA)
plot(treeA)
install.packages("rpart")
install.packages("rpart.plot")
rpart.plot(treeA,
type = 3,
digits = 2,
fallen.leaves = TRUE)
Rtools
install.Rtools()
library(installr)
installr
install.Rtools()
library("rpart.plot")
rpart.plot(treeA,
type = 3,
digits = 2,
fallen.leaves = TRUE)
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
getwd()
setwd('./OMSA/ISYE6501/Homework/Week_7/Results')
getwd()
# Read in data.
uscrime_raw <- read.table("../Data/uscrime.txt",
header = TRUE)
getwd()
setwd('C:/Users/caler/Documents/OMSA/ISYE6501/Homework/Week_7/Results')
getwd()
# Read in data.
uscrime_raw <- read.table("../Data/uscrime.txt",
header = TRUE)
getwd()
setwd('./OMSA/ISYE6501/Homework/Week_7/Results')
getwd()
# Read in data.
uscrime_raw <- read.table("../Data/uscrime.txt",
header = TRUE)
setwd('./../../../../..')
getwd()
getwd()
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
getwd()
setwd('./OMSA/ISYE6501/Homework/Week_7/Results')
getwd()
# Read in data.
uscrime_raw <- read.table("../Data/uscrime.txt",
header = TRUE)
getwd()
# Import libraries.
library(rpart)
# Specify minimum leaf size required before branching.
# 10% of data must occupy leaf before split is attempted.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05) * 2
# Create regression tree model.
treeA <- rpart(formula = Crime ~ .,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
treeA
plot(treeA)
# treeB <- rpart(formula = Crime ~ Ed + Ineq + U2,
# treeB <- rpart(formula = Crime ~ Ed + Ineq + U2,
#                data = uscrime_raw,
# treeB <- rpart(formula = Crime ~ Ed + Ineq + U2,
#                data = uscrime_raw,
#                method = 'anova',
getwd()
setwd("C:/Users/caler/Documents")
getwd()
getwd()
?cv.kknn
knit_with_parameters('~/OMSA/ISYE6501/Homework/Week_13/Results/Week13HW.Rmd', encoding = 'UTF-8')
library(tidyverse)
library(httr)
library(hexbin)
library(jsonlite)
library(scales)
percent_formatter = function(x) {
scales::percent(x, accuracy = 1)
}
players_url = "http://stats.nba.com/stats/commonallplayers?LeagueID=00&Season=2019-20&IsOnlyCurrentSeason=0"
request_headers = c(
`Connection` = 'keep-alive',
`Accept` = 'application/json, text/plain, */*',
`x-nba-stats-token` = 'true',
`X-NewRelic-ID` = 'VQECWF5UChAHUlNTBwgBVw==',
`User-Agent` = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36',
`x-nba-stats-origin` = 'stats',
`Sec-Fetch-Site` = 'same-origin',
`Sec-Fetch-Mode` = 'cors',
`Referer` = 'https://stats.nba.com/players/leaguedashplayerbiostats/',
`Accept-Encoding` = 'gzip, deflate, br',
`Accept-Language` = 'en-US,en;q=0.9'
)
request = GET(players_url, add_headers(request_headers))
View(request)
players_data = fromJSON(content(request, as = "text"))
View(players_data)
players = tbl_df(data.frame(players_data$resultSets$rowSet[[1]], stringsAsFactors = FALSE))
View(players)
names(players) = tolower(players_data$resultSets$headers[[1]])
players = mutate(players,
person_id = as.numeric(person_id),
rosterstatus = as.logical(as.numeric(rosterstatus)),
from_year = as.numeric(from_year),
to_year = as.numeric(to_year),
team_id = as.numeric(team_id)
)
if (Sys.Date() <= as.Date("2017-10-20")) {
players = mutate(players, to_year = pmin(to_year, 2016))
}
players$name = sapply(players$display_last_comma_first, function(s) {
paste(rev(strsplit(s, ", ")[[1]]), collapse = " ")
})
first_year_of_data = 1996
last_year_of_data = max(players$to_year)
season_strings = paste(first_year_of_data:last_year_of_data,
substr(first_year_of_data:last_year_of_data + 1, 3, 4),
sep = "-")
names(season_strings) = first_year_of_data:last_year_of_data
available_players = filter(players, to_year >= first_year_of_data)
View(available_players)
names_table = table(available_players$name)
dupe_names = names(names_table[which(names_table > 1)])
available_players$name[available_players$name %in% dupe_names] = paste(
available_players$name[available_players$name %in% dupe_names],
available_players$person_id[available_players$name %in% dupe_names]
)
available_players$lower_name = tolower(available_players$name)
available_players = arrange(available_players, lower_name)
View(available_players)
find_player_by_name = function(n) {
filter(available_players, lower_name == tolower(n))
}
find_player_id_by_name = function(n) {
find_player_by_name(n)$person_id
}
source("../Functions/lookup_playerID.R")
source("./Functions/lookup_playerID.R")
setwd("./Shotcharts")
getwd()
library(R2WinBUGS)
install.packages(R2WinBUGS)
install.packages("R2WinBUGS")
library(R2WinBUGS)
library(R2WinBUGS)
model{
for (i in 1:N) {
Y[i] ~ dnorm(mu[i], tau)
mu[i] <- alpha + beta * (x[i] - x.bar)
}
x.bar <- mean(x[])
alpha ~ dnorm(0, 0.0001)
beta ~ dnorm(0, 0.0001)
tau ~ dgamma(0.001, 0.001)
sigma <- 1.0/sqrt(tau)
beta0 <- alpha - beta * x.bar
}
library("readxl")
getwd()
read_excel('../Downloads/cp_gmsc.xlsx')
cp <- read_excel('../Downloads/cp_gmsc.xlsx')
View(cp)
?read_excel
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = 'B:C')
View(cp)
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = cell_cols('B:C'))
View(cp)
library(ggplot2)
ggplot(data=cp, aes(x=GmSc,fill = Outcome)) + geom_histogram()
library('readxl')
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = cell_cols('B:C'))
library(ggplot2)
ggplot(data=cp, aes(x=GmSc,fill = Outcome)) + geom_histogram()
library('readxl')
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = cell_cols('B:C'))
library(ggplot2)
ggplot(data=cp, aes(x=GmSc,fill = Outcome)) + geom_histogram(bins = 10)
library('readxl')
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = cell_cols('B:C'))
library(ggplot2)
ggplot(data=cp, aes(x=GmSc,fill = Outcome)) + geom_histogram(bins = 6)
?geom_histogram
library('readxl')
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = cell_cols('B:C'))
library(ggplot2)
ggplot(data=cp, aes(x=GmSc,fill = Outcome)) + geom_histogram(bins = 6, color = '#E56020', fill = '#1D1160')
library('readxl')
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = cell_cols('B:C'))
library(ggplot2)
ggplot(data=cp, aes(x=GmSc, fill = Outcome)) + geom_histogram(bins = 6)
ggplot(data=cp, aes(x=GmSc, fill = Outcome)) + geom_histogram(bins = 6, color = 'black')
library('readxl')
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = cell_cols('B:C'))
library(ggplot2)
ggplot(data=cp, aes(x=GmSc, fill = Outcome)) + geom_histogram(bins = 7, color = 'black')
library('readxl')
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = cell_cols('B:C'))
library(ggplot2)
ggplot(data=cp, aes(x=GmSc, fill = Outcome)) + geom_histogram(bins = 5, color = 'black')
library('readxl')
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = cell_cols('B:C'))
library(ggplot2)
ggplot(data=cp, aes(x=GmSc, fill = Outcome)) + geom_histogram(bins = 6, color = 'black')
library('readxl')
cp <- read_excel('../Downloads/cp_gmsc.xlsx',
range = cell_cols('B:C'))
library(ggplot2)
ggplot(data=cp, aes(x=GmSc, fill = Outcome)) + geom_histogram(bins = 6, color = 'black') + ggtitle('Chris Paul 2020-21')
install.packages("DiagrammeR")
install.packages("DiagrammeR")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
node [shape = rectangle]
rec1 [label = 'Step 1. Wake up']
rec2 [label = 'Step 2. Write code']
rec3 [label =  'Step 3. ???']
rec4 [label = 'Step 4. PROFIT']
# edge definitions with the node IDs
rec1 -> rec2 -> rec3 -> rec4
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
rec1 [label = 'Step 1. Wake up']
rec2 [label = 'Step 2. Write code']
rec3 [label =  'Step 3. ???']
rec4 [label = 'Step 4. PROFIT']
# edge definitions with the node IDs
rec1 -> rec2 -> rec3 -> rec4
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
rec1 [label = 'Tinel's sign]
rec2 [label = 'Phalen's test']
rec3 [label =  'nerve conduction velocity test']
# edge definitions with the node IDs
rec1 -> rec2 -> rec3 -> rec4
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
rec1 [label = 'Tinel's sign']
rec2 [label = 'Phalen's test']
rec3 [label =  'nerve conduction velocity test']
# edge definitions with the node IDs
rec1 -> rec2 -> rec3 -> rec4
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
rec1 [label = 'Tinels sign']
rec2 [label = 'Phalens test']
rec3 [label =  'nerve conduction velocity test']
# edge definitions with the node IDs
rec1 -> rec2 -> rec3 -> rec4
}",
height = 500)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
rec1 [label = 'Tinel\'s sign']
rec2 [label = 'Phalens test']
rec3 [label =  'nerve conduction velocity test']
# edge definitions with the node IDs
rec1 -> rec2 -> rec3 -> rec4
}",
height = 500)
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Import libraries.
library(readxl)
library(dplyr)
library(stringr)
# Set working directory.
setwd('./MyProjects/NBA/R/Projects/Rotation_Visualizations/')
# Read in data.
sas.net.ratings <- read_excel('SAS_MEM_012622.xlsx',
sheet = 'SAS')
mem.net.ratings <- read_excel('SAS_MEM_012622.xlsx',
sheet = 'MEM')
lineups <- read_excel('SAS_MEM_012622.xlsx',
sheet = 'Lineups')
View(sas.net.ratings)
