output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("uscrime.txt",
header = TRUE)
# Import libraries.
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(qpcR)
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("uscrime.txt",
header = TRUE)
# Import libraries.
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(qpcR)
getwd()
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("/OMSA/ISYE6501/Homework/Week_6/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(qpcR)
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table(".../OMSA/ISYE6501/Homework/Week_6/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(qpcR)
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_6/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(qpcR)
uscrime_pca <- prcomp(uscrime_raw,
scale = TRUE)
View(uscrime_pca)
summary(uscrime_pca)
View(uscrime_raw)
names(uscrime_pca)
uscrime_pca <- prcomp(uscrime_raw[, 1:15],
scale = TRUE)
summary(uscrime_pca)
#' ---
#' title: "Appendix: Week 6 Homework 9.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_6/Data/uscrime.txt",
header = TRUE)
uscrime_pca <- prcomp(uscrime_raw[, 1:15],
scale = TRUE)
summary(uscrime_pca)
View(uscrime_pca)
cor(uscrime_pca$x)
uscrime_pca$rotation
screeplot(uscrime_pca,
type = "lines")
# Get first 4 principal components.
pc <- uscrime_pca$x[, 1:4]
uscrime_raw[, -1]
uscrime_pc <- cbind(pc, uscrime_raw[, 16])
View(uscrime_pc)
View(pc)
model_pc <- lm(V5 ~ .,
data = as.data.frame(uscrime_pc))
summary(model_pc)
#' ---
#' title: "Appendix: Week 7 Homework 10.1"
#' author: "-"
#' date: "Fall 2021"
#' ---
############## ADMINISTRATIVE WORK ##############
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_7/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(rpart)
View(uscrime_raw)
# Specify minimum leaf size.
minleaf <- nrow(uscrime_raw) * 0.05
# Specify minimum leaf size.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05)
tree1 <- rpart(formula = Crime ~.,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
View(tree1)
printcp(fit)
printcp(tree1)
View(uscrime_raw)
treeA <- rpart(formula = Crime ~.,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_7/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(rpart)
# Specify minimum leaf size.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05)
treeA <- rpart(formula = Crime ~.,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
treeB <- rpart(formula = Crime ~ Ed + Ineq + U2,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
printcp(treeB)
plot(treeB)
text(treeB)
plotcp(treeB)
summary(treeB)
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_7/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(rpart)
# Specify minimum leaf size.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05) * 2
treeA <- rpart(formula = Crime ~.,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
treeB <- rpart(formula = Crime ~ Ed + Ineq + U2,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
plot(treeA)
treeA_plot <- plot(treeA)
treeA_plot <- plot(treeA) + text(treeA)
plot(treeA)
text(treeA)
print(treeA)
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
# Read in data.
uscrime_raw <- read.table("./OMSA/ISYE6501/Homework/Week_7/Data/uscrime.txt",
header = TRUE)
# Import libraries.
library(rpart)
# Specify minimum leaf size required before branching.
# 10% of data must occupy leaf before split is attempted.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05) * 2
# Specify minimum leaf size required before branching.
# 10% of data must occupy leaf before split is attempted.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05) * 2
# Create regression tree model.
treeA <- rpart(formula = Crime ~ .,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
treeA
rpart.plot(treeA)
plot(treeA)
install.packages("rpart")
install.packages("rpart.plot")
rpart.plot(treeA,
type = 3,
digits = 2,
fallen.leaves = TRUE)
Rtools
install.Rtools()
library(installr)
installr
install.Rtools()
library("rpart.plot")
rpart.plot(treeA,
type = 3,
digits = 2,
fallen.leaves = TRUE)
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
getwd()
setwd('./OMSA/ISYE6501/Homework/Week_7/Results')
getwd()
# Read in data.
uscrime_raw <- read.table("../Data/uscrime.txt",
header = TRUE)
getwd()
setwd('C:/Users/caler/Documents/OMSA/ISYE6501/Homework/Week_7/Results')
getwd()
# Read in data.
uscrime_raw <- read.table("../Data/uscrime.txt",
header = TRUE)
getwd()
setwd('./OMSA/ISYE6501/Homework/Week_7/Results')
getwd()
# Read in data.
uscrime_raw <- read.table("../Data/uscrime.txt",
header = TRUE)
setwd('./../../../../..')
getwd()
getwd()
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
getwd()
setwd('./OMSA/ISYE6501/Homework/Week_7/Results')
getwd()
# Read in data.
uscrime_raw <- read.table("../Data/uscrime.txt",
header = TRUE)
getwd()
# Import libraries.
library(rpart)
# Specify minimum leaf size required before branching.
# 10% of data must occupy leaf before split is attempted.
minleaf <- ceiling(nrow(uscrime_raw) * 0.05) * 2
# Create regression tree model.
treeA <- rpart(formula = Crime ~ .,
data = uscrime_raw,
method = 'anova',
control = rpart.control(minsplit = minleaf))
treeA
plot(treeA)
# treeB <- rpart(formula = Crime ~ Ed + Ineq + U2,
# treeB <- rpart(formula = Crime ~ Ed + Ineq + U2,
#                data = uscrime_raw,
# treeB <- rpart(formula = Crime ~ Ed + Ineq + U2,
#                data = uscrime_raw,
#                method = 'anova',
getwd()
setwd("C:/Users/caler/Documents")
getwd()
getwd()
?cv.kknn
knit_with_parameters('~/OMSA/ISYE6501/Homework/Week_13/Results/Week13HW.Rmd', encoding = 'UTF-8')
library(tidyverse)
library(httr)
library(hexbin)
library(jsonlite)
library(scales)
percent_formatter = function(x) {
scales::percent(x, accuracy = 1)
}
players_url = "http://stats.nba.com/stats/commonallplayers?LeagueID=00&Season=2019-20&IsOnlyCurrentSeason=0"
request_headers = c(
`Connection` = 'keep-alive',
`Accept` = 'application/json, text/plain, */*',
`x-nba-stats-token` = 'true',
`X-NewRelic-ID` = 'VQECWF5UChAHUlNTBwgBVw==',
`User-Agent` = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36',
`x-nba-stats-origin` = 'stats',
`Sec-Fetch-Site` = 'same-origin',
`Sec-Fetch-Mode` = 'cors',
`Referer` = 'https://stats.nba.com/players/leaguedashplayerbiostats/',
`Accept-Encoding` = 'gzip, deflate, br',
`Accept-Language` = 'en-US,en;q=0.9'
)
request = GET(players_url, add_headers(request_headers))
View(request)
players_data = fromJSON(content(request, as = "text"))
View(players_data)
players = tbl_df(data.frame(players_data$resultSets$rowSet[[1]], stringsAsFactors = FALSE))
View(players)
names(players) = tolower(players_data$resultSets$headers[[1]])
players = mutate(players,
person_id = as.numeric(person_id),
rosterstatus = as.logical(as.numeric(rosterstatus)),
from_year = as.numeric(from_year),
to_year = as.numeric(to_year),
team_id = as.numeric(team_id)
)
if (Sys.Date() <= as.Date("2017-10-20")) {
players = mutate(players, to_year = pmin(to_year, 2016))
}
players$name = sapply(players$display_last_comma_first, function(s) {
paste(rev(strsplit(s, ", ")[[1]]), collapse = " ")
})
first_year_of_data = 1996
last_year_of_data = max(players$to_year)
season_strings = paste(first_year_of_data:last_year_of_data,
substr(first_year_of_data:last_year_of_data + 1, 3, 4),
sep = "-")
names(season_strings) = first_year_of_data:last_year_of_data
available_players = filter(players, to_year >= first_year_of_data)
View(available_players)
names_table = table(available_players$name)
dupe_names = names(names_table[which(names_table > 1)])
available_players$name[available_players$name %in% dupe_names] = paste(
available_players$name[available_players$name %in% dupe_names],
available_players$person_id[available_players$name %in% dupe_names]
)
available_players$lower_name = tolower(available_players$name)
available_players = arrange(available_players, lower_name)
View(available_players)
find_player_by_name = function(n) {
filter(available_players, lower_name == tolower(n))
}
find_player_id_by_name = function(n) {
find_player_by_name(n)$person_id
}
source("../Functions/lookup_playerID.R")
source("./Functions/lookup_playerID.R")
setwd("./Shotcharts")
getwd()
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
setwd('MyProjects/NBA/R/Projects')
# Read in raw data.
data <- read.csv('shots_data.csv')
View(data)
# Define left/right corners (xmin, ymax).
c3_left <- c(-22, 7.8)
c3_right <- c(22, 7.8)
c_intercept <- sqrt(23.75 ** 2 - 22 ** 2)
break_3 <- c(-c_intercept, c_intercept)
?boundary
?fs
?mgcv
install.packages(mgcv)
?fs.test
library(mgcv)
library(mgcv)
m <- 300;n <- 150
xm <- seq(-1,4,length=m);yn<-seq(-1,1,length=n)
x <- rep(xm,n);y<-rep(yn,rep(m,n))
er <- matrix(fs.test(x,y),m,n)
View(er)
bnd <- fs.boundary()
View(bnd)
bnd
plot(bnd)
in.bnd <- inSide(bnd,x,y)
plot(x,y,col=as.numeric(in.bnd)+1,pch=".")
?fs.test
c3 <- data[data$x < c3_left[1]]
c3 <- data[data$x < c3_left[1], ]
View(c3)
c3 <- data[data$x < c3_left[1] & data$y < c3_left[2], ]
View(c3)
c3 <- data[(data$x < c3_left[1] & data$y < c3_left[2]) | (data$x > c3_right[1] & data$y < c3_right[2]), ]
View(c3)
c3 <- data[(data$x < -c3_x & data$y < c3_y) | (data$x > c3 & data$y < c3_y), ]
c3 <- data[(data$x < -c3_x & data$y < c3_y) | (data$x > c3_x & data$y < c3_y), ]
# Define left/right corners (xmin, ymax).
c3_x <- 22
c3_y <- 7.8
c3 <- data[(data$x < -c3_x & data$y < c3_y) | (data$x > c3_x & data$y < c3_y), ]
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
setwd('MyProjects/NBA/R/Projects')
library(mgcv)
# Read in raw data.
data <- read.csv('shots_data.csv')
# Read in raw data.
data <- read.csv('shots_data.csv')
# Define left/right corners (xmin, ymax).
c3_x <- 22
c3_y <- 7.8
c3 <- data[(data$x < -c3_x & data$y < c3_y) | (data$x > c3_x & data$y < c3_y), ]
c_intercept <- sqrt(nc3_d ** 2 - c3_x ** 2)
nc3
nc3_d <- 23.75
c_intercept <- sqrt(nc3_d ** 2 - c3_x ** 2)
nc3_a <- data[(data$x < -c3_x & data$y < c_intercept & data$y > c3_y) | (data$x > c3_x & data$y < c_intercept & data$y > c3_y), ]
data$distance <- sqrt(data$x ^ 2 + data$y ^ 2)
nc3_b <- data[data$y >= c_intercept & data$distance > nc3_d, ]
nc3_a <- data[(data$x < -c3_x & data$y < c_intercept & data$y > c3_y) |
(data$x > c3_x & data$y < c_intercept & data$y > c3_y) |
(data$y >= c_intercept & data$distance > nc3_d), ]
# Author: Cale Williams
# Last Updated: 01/07/2022
# ADMINISTRATIVE WORK -----------------------------------------------------
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
setwd('MyProjects/NBA/R/Projects')
# DATA PREPARATION --------------------------------------------------------
# Read in raw data.
data <- read.csv('shots_data.csv')
data$distance <- sqrt(data$x ^ 2 + data$y ^ 2)
# DEFINE ZONES ------------------------------------------------------------
# Define left/right corners (xmin, ymax).
c3_x <- 22
c3_y <- 7.8
c3 <- data[(data$x < -c3_x & data$y <= c3_y) | (data$x > c3_x & data$y <= c3_y), ]
nc3_d <- 23.75
c_intercept <- sqrt(nc3_d ** 2 - c3_x ** 2)
nc3 <- data[(data$x < -c3_x & data$y < c_intercept & data$y > c3_y) |
(data$x > c3_x & data$y < c_intercept & data$y > c3_y) |
(data$y >= c_intercept & data$distance > nc3_d), ]
View(nc3)
rownames(nc3)
pt2 <- data[-rownames(c3)]
pt2 <- data[-rownames(c3), ]
View(c3)
idx3 <- rownames(c3)
idx3 <- append(rownames(c3), rownames(nc3))
pt2 <- data[-idx3, ]
idx3 <- as.numeric(append(rownames(c3), rownames(nc3)))
pt2 <- data[-idx3, ]
assertthat::are_equal(nrow(data), sum(nrow(c3, nc3, pt2)))
?sum
assertthat::are_equal(nrow(data), sum(nrow(c3), nrow(nc3), nrow(pt2)))
library(ggplot2)
View(c3)
ggplot(NULL, aes(x, y)) +
geom_point(data = c3) +
geom_point(data = nc3)
ggplot(NULL, aes(x, y)) +
geom_point(data = c3) +
geom_point(data = nc3) +
geom_point(data = pt2, color = 'red')
ggplot(NULL, aes(x, y)) +
geom_point(data = c3) +
geom_point(data = nc3, color = 'blue') +
geom_point(data = pt2, color = 'red')
A_c3_eFG <- c3[c3$team == 'Team A']
A_c3_eFG <- c3[c3$team == 'Team A', ]
View(A_c3_eFG)
A_c3_eFG <- c3[c3$team == 'Team A', fgmade]
A_c3_eFG <- c3[c3$team == 'Team A', 'fgmade']
A_c3_eFG <- sum(c3[c3$team == 'Team A', 'fgmade'])
A_c3_eFG
A_c3_eFG <- sum(c3[c3$team == 'Team A', 'fgmade']) / nrow(c3[c3$team == 'Team A', ])
A_c3_eFG <- 1.5 * sum(c3[c3$team == 'Team A', 'fgmade']) / nrow(c3[c3$team == 'Team A', ])
A_nc3_eFG <- 1.5 * sum(nc3[nc3$team == 'Team A', 'fgmade']) / nrow(nc3[nc3$team == 'Team A', ])
B_c3_eFG <- 1.5 * sum(c3[c3$team == 'Team B', 'fgmade']) / nrow(c3[c3$team == 'Team B', ])
B_nc3_eFG <- 1.5 * sum(nc3[nc3$team == 'Team B', 'fgmade']) / nrow(nc3[nc3$team == 'Team B', ])
A_pt2_eFG <- sum(pt2[pt2$team == 'Team A', 'fgmade']) / nrow(pt2[pt2$team == 'Team A', ])
B_pt2_eFG <- sum(pt2[pt2$team == 'Team B', 'fgmade']) / nrow(pt2[pt2$team == 'Team B', ])
