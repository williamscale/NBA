runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
View(x)
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
View(data)
x <- data[data$PLAYER_NAME == 'Derrick White', ]
x <- x[, c('GAME_ID', 'PLAYER_NAME', 'TEAM_NAME', 'TIME', 'season.type', 'URL')]
x.url <- x[, 'URL']
x.url
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
celtics <- data[data$TEAM_NAME == 'Boston Celtics', ]
View(celtics)
celtics[1, 'URL']
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
load('C:/Users/caler/Documents/MyProjects/NBA/R/Projects/FG_Dashboard/Data/data_raw_2021-22.RData')
regular$season.type <- 'Regular Season'
playin$season.type <- 'Play-In'
playoffs$season.type <- 'Playoffs'
load('C:/Users/caler/Documents/MyProjects/NBA/R/Projects/FG_Dashboard/Data/data_raw_2021-22.RData')
regular$season.type <- 'Regular Season'
regular$season.url <- 'Regular%20Season'
playin$season.type <- 'Play-In'
playin$season.url <- 'PlayIn'
playoffs$season.type <- 'Playoffs'
playoffs$season.url <- 'Playoffs'
data.raw <- rbind(regular, playin, playoffs)
#
data <- data.raw[data.raw$LOC_Y <= 0, ]
data$PERIOD[data$PERIOD > 4] <- 'OT'
data$TEAM_NAME[data$TEAM_NAME == 'Los Angeles Lakers'] <- 'LA Lakers'
team.codes <- data.frame(abb = c('ATL', 'BKN', 'BOS', 'CHA', 'CHI', 'CLE',
'DAL', 'DEN', 'DET', 'GSW', 'HOU', 'IND',
'LAC', 'LAL', 'MEM', 'MIA', 'MIL', 'MIN',
'NOP', 'NYK', 'OKC', 'ORL', 'PHI', 'PHX',
'POR', 'SAC', 'SAS', 'TOR', 'UTA', 'WAS'),
full = c('Atlanta Hawks', 'Brooklyn Nets', 'Boston Celtics',
'Charlotte Hornets', 'Chicago Bulls', 'Cleveland Cavaliers',
'Dallas Mavericks', 'Denver Nuggets', 'Detroit Pistons',
'Golden State Warriors', 'Houston Rockets', 'Indiana Pacers',
'LA Clippers', 'LA Lakers', 'Memphis Grizzlies',
'Miami Heat', 'Milwaukee Bucks', 'Minnesota Timberwolves',
'New Orleans Pelicans', 'New York Knicks', 'Oklahoma City Thunder',
'Orlando Magic', 'Philadelphia 76ers', 'Phoenix Suns',
'Portland Trail Blazers', 'Sacramento Kings', 'San Antonio Spurs',
'Toronto Raptors', 'Utah Jazz', 'Washington Wizards'))
#
data <- left_join(data, team.codes, by = c('HTM' = 'abb'))
data <- data %>%
rename(HTM.FULL = full)
data$HOME.AWAY <- ifelse(data$TEAM_NAME == data$HTM.FULL, 'HOME', 'AWAY')
#
data$DATE <- mdy(paste(substr(data$GAME_DATE, 5, 6),
substr(data$GAME_DATE, 7, 8),
substr(data$GAME_DATE, 1, 4),
sep = '/'))
data$OPP <- ifelse(data$HOME.AWAY == 'HOME', data$VTM, data$HTM)
data$TIME <- paste('Q', data$PERIOD, ' ',
sprintf('%02d', data$MINUTES_REMAINING),
':', sprintf('%02d', data$SECONDS_REMAINING), sep = '')
data$URL <- paste('https://www.nba.com/stats/events/?CFID=&CFPARAMS=&ContextMeasure=FGA&EndPeriod=0&EndRange=28800&GameID=00',
data$GAME_ID, '&PlayerID=', data$PLAYER_ID,
'&RangeType=0&Season=2021-22&SeasonType=', data$season.url,
'&StartPeriod=0&StartRange=0&TeamID=', data$TEAM_ID,
'&flag=3&sct=plot&section=game&CF=SHOT_DISTANCE*E*',
data$SHOT_DISTANCE, ':p*E*', data$PERIOD, sep = '')
data$COLOR <- ifelse(data$SHOT_MADE_FLAG == 1, '#2aa198', '#dc322f')
save.image("~/MyProjects/NBA/R/Projects/FG_Dashboard/Data/data_2021-22.RData")
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
?textOutput
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
View(shotchart.bivariate.plotter)
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
View(shotchart.topn.plotter)
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
runApp('MyProjects/NBA/R/Projects/FG_Dashboard')
View(shotchart.kde.plotter)
# Author: Cale Williams
# Last Updated: 06/30/2022
# Import libraries.
library(readxl)
library(tidyr)
library(dplyr)
library(chorddiag)
library(reshape2)
library(ggplot2)
library(Matrix)
chord.plotter <- function(dataset, stat = 'PASS', pass.filter = 500, ast.filter = 30) {
data <- dataset %>%
filter(TEAM == 'SAS') %>%
rename('PASS.FROM' = `PASS FROM`, 'PASS.TO' = `PASS TO`) %>%
# select(-c(3:4, 9, 12, 15))
dplyr::select(-c(TEAM, 4, `FG%`, `2FG%`, `3FG%`))
# Fix name discrepancy.
data[data == 'Primo, Joshua'] <- 'Primo, Josh'
if (stat == 'PASS') {
other.from.pass <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
group_by(PASS.FROM) %>%
summarize(PASS.FROM.QTY = sum(PASS)) %>%
filter(PASS.FROM.QTY < pass.filter) %>%
dplyr::select(PASS.FROM) %>%
rename('OTHER.PLAYER' = PASS.FROM)
other.to.pass <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
group_by(PASS.TO) %>%
summarize(PASS.TO.QTY = sum(PASS)) %>%
filter(PASS.TO.QTY < pass.filter) %>%
dplyr::select(PASS.TO) %>%
rename('OTHER.PLAYER' = PASS.TO )
other.pass <- rbind(other.from.pass, other.to.pass) %>%
distinct()
other.pass <- other.pass[['OTHER.PLAYER']]
# other.from.pass <- data %>%
#   group_by(PASS.FROM) %>%
#   summarize(PASS.FROM.QTY = sum(PASS)) %>%
#   filter(PASS.FROM.QTY < pass.filter) %>%
#   select(PASS.FROM)
#
# other.to.pass <- data %>%
#   group_by(PASS.TO) %>%
#   summarize(PASS.TO.QTY = sum(PASS)) %>%
#   filter(PASS.TO.QTY < pass.filter) %>%
#   select(PASS.TO)
# other.pass <- inner_join(other.from.pass, other.to.pass, by = c('PASS.FROM' = 'PASS.TO'))[['PASS.FROM']]
passes <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
mutate(OTHER.FLAG = case_when(
((!PASS.FROM %in% other.pass) & (!PASS.TO %in% other.pass)) ~ ('A'),
((!PASS.FROM %in% other.pass) & (PASS.TO %in% other.pass)) ~ ('B'),
((PASS.FROM %in% other.pass) & (!PASS.TO %in% other.pass)) ~ ('C'),
((PASS.FROM %in% other.pass) & (PASS.TO %in% other.pass)) ~ ('D')))
passes.A <- passes[passes$OTHER.FLAG == 'A', ] %>%
select(-c(OTHER.FLAG, COMBO))
passes.other.B <- passes[passes$OTHER.FLAG == 'B', ] %>%
group_by(PASS.FROM) %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.TO = 'OTHER')
passes.other.C <- passes[passes$OTHER.FLAG == 'C', ] %>%
group_by(PASS.TO) %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.FROM = 'OTHER')
passes.other.D <- passes[passes$OTHER.FLAG == 'D', ] %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.FROM = 'OTHER') %>%
mutate(PASS.TO = 'OTHER')
pass <- rbind(passes.A, passes.other.B, passes.other.C, passes.other.D) %>%
separate(PASS.FROM, into = c('PASS.FROM', 'FIRST'), sep = ',') %>%
dplyr::select(-FIRST) %>%
separate(PASS.TO, into = c('PASS.TO', 'FIRST'), sep = ',') %>%
dplyr::select(-FIRST) %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
filter(COMBO != 'Murray.Murray')
pass.chord <- pass %>%
dplyr::select(c(1:3)) %>%
group_by(PASS.FROM) %>%
mutate(ID.FROM = cur_group_id()) %>%
ungroup() %>%
group_by(PASS.TO) %>%
mutate(ID.TO = cur_group_id())
pass.chord.mat <- as.matrix(sparseMatrix(i = pass.chord$ID.FROM,
j = pass.chord$ID.TO,
x = pass.chord$PASS))
ID.map.pass <- pass.chord %>%
ungroup() %>%
dplyr::select(PASS.FROM, ID.FROM) %>%
distinct(PASS.FROM, .keep_all = TRUE) %>%
arrange(ID.FROM)
rownames(pass.chord.mat) <- ID.map.pass$PASS.FROM
colnames(pass.chord.mat) <- ID.map.pass$PASS.FROM
chord.plot <- chorddiag(pass.chord.mat,
showTicks = FALSE,
margin = 120,
groupedgeColor = 'black',
tooltipNames = NULL)
} else if (stat == 'ASSIST') {
other.from.ast <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
group_by(PASS.FROM) %>%
summarize(AST.FROM.QTY = sum(AST)) %>%
filter(AST.FROM.QTY < ast.filter) %>%
dplyr::select(PASS.FROM) %>%
rename('OTHER.PLAYER' = PASS.FROM)
other.to.ast <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
group_by(PASS.TO) %>%
summarize(AST.TO.QTY = sum(AST)) %>%
filter(AST.TO.QTY < ast.filter) %>%
dplyr::select(PASS.TO) %>%
rename('OTHER.PLAYER' = PASS.TO )
other.ast <- rbind(other.from.ast, other.to.ast) %>%
distinct()
other.ast <- other.ast[['OTHER.PLAYER']]
asts <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
mutate(OTHER.FLAG = case_when(
((!PASS.FROM %in% other.ast) & (!PASS.TO %in% other.ast)) ~ ('A'),
((!PASS.FROM %in% other.ast) & (PASS.TO %in% other.ast)) ~ ('B'),
((PASS.FROM %in% other.ast) & (!PASS.TO %in% other.ast)) ~ ('C'),
((PASS.FROM %in% other.ast) & (PASS.TO %in% other.ast)) ~ ('D')))
asts.A <- asts[asts$OTHER.FLAG == 'A', ] %>%
dplyr::select(-c(OTHER.FLAG, COMBO))
asts.other.B <- asts[asts$OTHER.FLAG == 'B', ] %>%
group_by(PASS.FROM) %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.TO = 'OTHER')
asts.other.C <- asts[asts$OTHER.FLAG == 'C', ] %>%
group_by(PASS.TO) %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.FROM = 'OTHER')
asts.other.D <- asts[asts$OTHER.FLAG == 'D', ] %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.FROM = 'OTHER') %>%
mutate(PASS.TO = 'OTHER')
ast <- rbind(asts.A, asts.other.B, asts.other.C, asts.other.D) %>%
separate(PASS.FROM, into = c('PASS.FROM', 'FIRST'), sep = ',') %>%
dplyr::select(-FIRST) %>%
separate(PASS.TO, into = c('PASS.TO', 'FIRST'), sep = ',') %>%
dplyr::select(-FIRST) %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
filter(COMBO != 'Murray.Murray')
ast.chord <- ast %>%
dplyr::select(c(1:2, 4)) %>%
group_by(PASS.FROM) %>%
mutate(ID.FROM = cur_group_id()) %>%
ungroup() %>%
group_by(PASS.TO) %>%
mutate(ID.TO = cur_group_id())
ast.chord.mat <- as.matrix(sparseMatrix(i = ast.chord$ID.FROM,
j = ast.chord$ID.TO,
x = ast.chord$AST))
ID.map.ast <- ast.chord %>%
ungroup() %>%
dplyr::select(PASS.FROM, ID.FROM) %>%
distinct(PASS.FROM, .keep_all = TRUE) %>%
arrange(ID.FROM)
rownames(ast.chord.mat) <- ID.map.ast$PASS.FROM
colnames(ast.chord.mat) <- ID.map.ast$PASS.FROM
chord.plot <- chorddiag(ast.chord.mat,
showTicks = FALSE,
margin = 120,
groupedgeColor = 'black',
tooltipNames = NULL)
} else {
print('Invalid stat selected.')
}
return(chord.plot)
}
# TESTING -----------------------------------------------------------------
setwd('C:/Users/caler/Documents/MyProjects/NBA/R/Functions')
# Read in data.
pass.data <- read_excel('./../Projects/Passing/data_2021-22.xlsx')
chord.plotter(data = pass.data,
stat = 'PASS',
pass.filter = 1000,
ast.filter = 75)
# Author: Cale Williams
# Last Updated: 06/30/2022
# Import libraries.
library(readxl)
library(tidyr)
library(dplyr)
library(chorddiag)
library(reshape2)
library(ggplot2)
library(Matrix)
chord.plotter <- function(dataset, stat = 'PASS', pass.filter = 500, ast.filter = 30) {
data <- dataset %>%
filter(TEAM == 'SAS') %>%
rename('PASS.FROM' = `PASS FROM`, 'PASS.TO' = `PASS TO`) %>%
# select(-c(3:4, 9, 12, 15))
select(-c(TEAM, 4, `FG%`, `2FG%`, `3FG%`))
# Fix name discrepancy.
data[data == 'Primo, Joshua'] <- 'Primo, Josh'
if (stat == 'PASS') {
other.from.pass <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
group_by(PASS.FROM) %>%
summarize(PASS.FROM.QTY = sum(PASS)) %>%
filter(PASS.FROM.QTY < pass.filter) %>%
select(PASS.FROM) %>%
rename('OTHER.PLAYER' = PASS.FROM)
other.to.pass <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
group_by(PASS.TO) %>%
summarize(PASS.TO.QTY = sum(PASS)) %>%
filter(PASS.TO.QTY < pass.filter) %>%
select(PASS.TO) %>%
rename('OTHER.PLAYER' = PASS.TO )
other.pass <- rbind(other.from.pass, other.to.pass) %>%
distinct()
other.pass <- other.pass[['OTHER.PLAYER']]
# other.from.pass <- data %>%
#   group_by(PASS.FROM) %>%
#   summarize(PASS.FROM.QTY = sum(PASS)) %>%
#   filter(PASS.FROM.QTY < pass.filter) %>%
#   select(PASS.FROM)
#
# other.to.pass <- data %>%
#   group_by(PASS.TO) %>%
#   summarize(PASS.TO.QTY = sum(PASS)) %>%
#   filter(PASS.TO.QTY < pass.filter) %>%
#   select(PASS.TO)
# other.pass <- inner_join(other.from.pass, other.to.pass, by = c('PASS.FROM' = 'PASS.TO'))[['PASS.FROM']]
passes <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
mutate(OTHER.FLAG = case_when(
((!PASS.FROM %in% other.pass) & (!PASS.TO %in% other.pass)) ~ ('A'),
((!PASS.FROM %in% other.pass) & (PASS.TO %in% other.pass)) ~ ('B'),
((PASS.FROM %in% other.pass) & (!PASS.TO %in% other.pass)) ~ ('C'),
((PASS.FROM %in% other.pass) & (PASS.TO %in% other.pass)) ~ ('D')))
passes.A <- passes[passes$OTHER.FLAG == 'A', ] %>%
select(-c(OTHER.FLAG, COMBO))
passes.other.B <- passes[passes$OTHER.FLAG == 'B', ] %>%
group_by(PASS.FROM) %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.TO = 'OTHER')
passes.other.C <- passes[passes$OTHER.FLAG == 'C', ] %>%
group_by(PASS.TO) %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.FROM = 'OTHER')
passes.other.D <- passes[passes$OTHER.FLAG == 'D', ] %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.FROM = 'OTHER') %>%
mutate(PASS.TO = 'OTHER')
pass <- rbind(passes.A, passes.other.B, passes.other.C, passes.other.D) %>%
separate(PASS.FROM, into = c('PASS.FROM', 'FIRST'), sep = ',') %>%
select(-FIRST) %>%
separate(PASS.TO, into = c('PASS.TO', 'FIRST'), sep = ',') %>%
select(-FIRST) %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
filter(COMBO != 'Murray.Murray')
pass.chord <- pass %>%
select(c(1:3)) %>%
group_by(PASS.FROM) %>%
mutate(ID.FROM = cur_group_id()) %>%
ungroup() %>%
group_by(PASS.TO) %>%
mutate(ID.TO = cur_group_id())
pass.chord.mat <- as.matrix(sparseMatrix(i = pass.chord$ID.FROM,
j = pass.chord$ID.TO,
x = pass.chord$PASS))
ID.map.pass <- pass.chord %>%
ungroup() %>%
select(PASS.FROM, ID.FROM) %>%
distinct(PASS.FROM, .keep_all = TRUE) %>%
arrange(ID.FROM)
rownames(pass.chord.mat) <- ID.map.pass$PASS.FROM
colnames(pass.chord.mat) <- ID.map.pass$PASS.FROM
chord.plot <- chorddiag(pass.chord.mat,
showTicks = FALSE,
margin = 120,
groupedgeColor = 'black',
tooltipNames = NULL)
} else if (stat == 'ASSIST') {
other.from.ast <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
group_by(PASS.FROM) %>%
summarize(AST.FROM.QTY = sum(AST)) %>%
filter(AST.FROM.QTY < ast.filter) %>%
select(PASS.FROM) %>%
rename('OTHER.PLAYER' = PASS.FROM)
other.to.ast <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
group_by(PASS.TO) %>%
summarize(AST.TO.QTY = sum(AST)) %>%
filter(AST.TO.QTY < ast.filter) %>%
select(PASS.TO) %>%
rename('OTHER.PLAYER' = PASS.TO )
other.ast <- rbind(other.from.ast, other.to.ast) %>%
distinct()
other.ast <- other.ast[['OTHER.PLAYER']]
asts <- data %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
distinct(COMBO, .keep_all = TRUE) %>%
mutate(OTHER.FLAG = case_when(
((!PASS.FROM %in% other.ast) & (!PASS.TO %in% other.ast)) ~ ('A'),
((!PASS.FROM %in% other.ast) & (PASS.TO %in% other.ast)) ~ ('B'),
((PASS.FROM %in% other.ast) & (!PASS.TO %in% other.ast)) ~ ('C'),
((PASS.FROM %in% other.ast) & (PASS.TO %in% other.ast)) ~ ('D')))
asts.A <- asts[asts$OTHER.FLAG == 'A', ] %>%
select(-c(OTHER.FLAG, COMBO))
asts.other.B <- asts[asts$OTHER.FLAG == 'B', ] %>%
group_by(PASS.FROM) %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.TO = 'OTHER')
asts.other.C <- asts[asts$OTHER.FLAG == 'C', ] %>%
group_by(PASS.TO) %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.FROM = 'OTHER')
asts.other.D <- asts[asts$OTHER.FLAG == 'D', ] %>%
summarize_if(is.numeric, sum) %>%
mutate(PASS.FROM = 'OTHER') %>%
mutate(PASS.TO = 'OTHER')
ast <- rbind(asts.A, asts.other.B, asts.other.C, asts.other.D) %>%
separate(PASS.FROM, into = c('PASS.FROM', 'FIRST'), sep = ',') %>%
select(-FIRST) %>%
separate(PASS.TO, into = c('PASS.TO', 'FIRST'), sep = ',') %>%
select(-FIRST) %>%
mutate(COMBO = paste(PASS.FROM, PASS.TO, sep = '.')) %>%
filter(COMBO != 'Murray.Murray')
ast.chord <- ast %>%
select(c(1:2, 4)) %>%
group_by(PASS.FROM) %>%
mutate(ID.FROM = cur_group_id()) %>%
ungroup() %>%
group_by(PASS.TO) %>%
mutate(ID.TO = cur_group_id())
ast.chord.mat <- as.matrix(sparseMatrix(i = ast.chord$ID.FROM,
j = ast.chord$ID.TO,
x = ast.chord$AST))
ID.map.ast <- ast.chord %>%
ungroup() %>%
select(PASS.FROM, ID.FROM) %>%
distinct(PASS.FROM, .keep_all = TRUE) %>%
arrange(ID.FROM)
rownames(ast.chord.mat) <- ID.map.ast$PASS.FROM
colnames(ast.chord.mat) <- ID.map.ast$PASS.FROM
chord.plot <- chorddiag(ast.chord.mat,
showTicks = FALSE,
margin = 120,
groupedgeColor = 'black',
tooltipNames = NULL)
} else {
print('Invalid stat selected.')
}
return(chord.plot)
}
# TESTING -----------------------------------------------------------------
setwd('C:/Users/caler/Documents/MyProjects/NBA/R/Functions')
# Read in data.
pass.data <- read_excel('./../Projects/Passing/data_2021-22.xlsx')
chord.plotter(data = pass.data,
stat = 'PASS',
pass.filter = 1000,
ast.filter = 75)
# Author: Cale Williams
# Last Updated: 02/18/2022
# ADMINISTRATIVE WORK -----------------------------------------------------
# Clear workspace and set seed.
rm(list = ls())
set.seed(55)
setwd('C:/Users/caler/Documents/MyProjects/NBA/R/Shotcharts')
# Import libraries.
library(dplyr)
library(ggplot2)
library(ggthemes)
library(plotly)
library(MASS)
# Import function.
source('../Functions/drawNBAcourt.R')
# DATA PREPARATION --------------------------------------------------------
# Read in data.
shots <- read.csv('Doug-McDermott.2021-22.csv',
header = TRUE)
# Transform shot locations.
shots.t <- shotchart.transformer(data = shots,
col.x = 'LOC_X',
col.y = 'LOC_Y')
fg.m <- shots.t %>%
filter(SHOT_MADE_FLAG == 1)
fg.a <- shots.t %>%
filter(SHOT_MADE_FLAG == 0)
kd.dj <- with(fg.m[, c('LOC_X', 'LOC_Y')], kde2d(LOC_X, LOC_Y, n = 50))
plot_ly(x = kd.dj$x, y = kd.dj$y, z = kd.dj$z) %>% add_surface()
ggplot(data = fg.m,
aes(x = SHOT_DISTANCE,
color = PLAYER_NAME,
fill = PLAYER_NAME)) +
# geom_histogram(aes(y = ..density..),
#                color = 'black')
geom_density(alpha = 0.2) +
xlim(0, 40) +
theme_solarized_2()
